import os
import requests
import tempfile
import random
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    ContextTypes, filters
)
from gtts import gTTS

# –¢–æ–∫–µ–Ω—ã
TELEGRAM_TOKEN = os.getenv("8269598789:AAFrhPCLji4-CwJlV0E4pDI8XBNrCeVxrE4")
HF_API_KEY = os.getenv("HF_API_KEY")  # Hugging Face API Token
ADMIN_ID = int(os.getenv("ADMIN_USER_ID", "0"))

# –®—É—Ç–∫–∏
jokes = [
    "–ü–æ—á–µ–º—É –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—ã –ø—É—Ç–∞—é—Ç –•—ç–ª–ª–æ—É–∏–Ω –∏ –†–æ–∂–¥–µ—Å—Ç–≤–æ? –ü–æ—Ç–æ–º—É —á—Ç–æ OCT 31 = DEC 25!",
    "–ë–æ—Ç –±–µ–∑ –±–∞–≥–æ–≤? –≠—Ç–æ —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞ üòé",
    "–Ø ‚Äì Crazy Mita, –∞ —Ç—ã?"
]

# üé≠ Hugging Face Chat (–∑–∞–º–µ–Ω–∞ DeepAI)
def hf_chat(prompt: str) -> str:
    url = "https://api-inference.huggingface.co/models/gpt2"
    headers = {"Authorization": f"Bearer {HF_API_KEY}"}
    try:
        response = requests.post(url, headers=headers, json={"inputs": prompt})
        data = response.json()
        if isinstance(data, list) and "generated_text" in data[0]:
            return data[0]["generated_text"]
        return "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ Hugging Face"
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ API: {e}"

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç, —è Crazy Mita ü§ñ!\n"
        "–Ø —É–º–µ—é –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Ç–≤–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –¥–∞–∂–µ –≥–æ–≤–æ—Ä–∏—Ç—å –≥–æ–ª–æ—Å–æ–º.\n"
        "–ö–æ–º–∞–Ω–¥—ã: /help"
    )

# /help
async def help_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "üìñ –ö–æ–º–∞–Ω–¥—ã Crazy Mita:\n\n"
        "/start ‚Äì –∑–∞–ø—É—Å–∫\n"
        "/help ‚Äì —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
        "/voice [—Ç–µ–∫—Å—Ç] ‚Äì –æ—Ç–≤–µ—Ç –≥–æ–ª–æ—Å–æ–º\n"
        "/ad [—Ç–µ–∫—Å—Ç] ‚Äì —Ä–µ–∫–ª–∞–º–∞ –∑–∞ –¥–æ–Ω–∞—Ç\n"
        "/joke ‚Äì —Å–ª—É—á–∞–π–Ω–∞—è —à—É—Ç–∫–∞\n"
        "/quote ‚Äì —Å–ª—É—á–∞–π–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞\n"
        "/quiz ‚Äì –º–∏–Ω–∏-–≤–∏–∫—Ç–æ—Ä–∏–Ω–∞\n"
        "/fich ‚Äì –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –Ω–æ–≤—É—é —Ñ–∏—à–∫—É\n"
        "/meme ‚Äì —Å–ª—É—á–∞–π–Ω—ã–π –º–µ–º\n"
        "/info ‚Äì –∏–Ω—Ñ–æ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ\n"
        "/ping ‚Äì –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–æ—Ç–∞\n"
    )
    await update.message.reply_text(text)

# /voice
async def voice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /voice [—Ç–µ–∫—Å—Ç]")
        return
    text = " ".join(context.args)
    reply = hf_chat(text)
    try:
        tts = gTTS(text=reply, lang="ru")
        with tempfile.NamedTemporaryFile(delete=True) as fp:
            filename = f"{fp.name}.mp3"
            tts.save(filename)
            await update.message.reply_voice(voice=open(filename, "rb"), caption=reply)
    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–∑–≤—É—á–∫–∏: {e}")

# /ad
async def ad_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[InlineKeyboardButton("üí∏ –î–æ–Ω–∞—Ç–∏—Ç—å", url="https://www.donationalerts.com/r/crazymita")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    text = "üö´ –ù–µ—Ç! –¢–∞–∫ –Ω–µ–ª—å–∑—è ‚Äî –Ω—É–∂–Ω–æ –∑–∞–¥–æ–Ω–∞—Ç–∏—Ç—å!\n\n#ad\n*–°—Ç–æ–∏–º–æ—Å—Ç—å —Ä–µ–∫–ª–∞–º—ã: 10$*"
    await update.message.reply_text(text, parse_mode="Markdown", reply_markup=reply_markup)

# /joke
async def joke_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(random.choice(jokes))

# /quote
async def quote_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        resp = requests.get("https://api.quotable.io/random").json()
        text = f"üí¨ {resp['content']} ‚Äî {resp['author']}"
    except:
        text = "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–∏—Ç–∞—Ç—É."
    await update.message.reply_text(text)

# /quiz
quiz_questions = [
    {"question": "–°–∫–æ–ª—å–∫–æ –ø–ª–∞–Ω–µ—Ç –≤ –°–æ–ª–Ω–µ—á–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ?", "answer": "8"},
    {"question": "–°—Ç–æ–ª–∏—Ü–∞ –Ø–ø–æ–Ω–∏–∏?", "answer": "–¢–æ–∫–∏–æ"},
]

async def quiz_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = random.choice(quiz_questions)
    context.user_data["quiz_answer"] = q["answer"].lower()
    await update.message.reply_text(f"‚ùì –í–∏–∫—Ç–æ—Ä–∏–Ω–∞: {q['question']}")

# /fich
async def fich_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[InlineKeyboardButton("üí° –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ñ–∏—à–∫—É", url="https://t.me/YourOtherBot")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–•–æ—Ç–∏—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –Ω–æ–≤—É—é —Ñ–∏—à–∫—É?\n–ñ–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É üëá", reply_markup=reply_markup)

# /meme
async def meme_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        resp = requests.get("https://meme-api.com/gimme").json()
        url = resp["url"]
        await update.message.reply_photo(photo=url, caption="üòÇ –õ–æ–≤–∏ –º–µ–º!")
    except:
        await update.message.reply_text("‚ö†Ô∏è –ú–µ–º—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å...")

# /info
async def info_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    text = (
        f"üë§ –¢–≤–æ—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n\n"
        f"ID: `{user.id}`\n"
        f"–ò–º—è: {user.first_name}\n"
        f"–Æ–∑–µ—Ä–Ω–µ–π–º: @{user.username if user.username else '‚Äî'}"
    )
    await update.message.reply_text(text, parse_mode="Markdown")

# /ping
async def ping_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üèì Pong! Crazy Mita –∂–∏–≤ üöÄ")

# –û—Ç–≤–µ—Ç—ã –Ω–∞ —Ç–µ–∫—Å—Ç
async def text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_text = update.message.text
    if "quiz_answer" in context.user_data:
        if user_text.lower() == context.user_data["quiz_answer"]:
            await update.message.reply_text("‚úÖ –í–µ—Ä–Ω–æ! üéâ")
        else:
            await update.message.reply_text(f"‚ùå –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {context.user_data['quiz_answer']}")
        del context.user_data["quiz_answer"]
        return
    reply = hf_chat(user_text)
    await update.message.reply_text(reply)

def main():
    if not TELEGRAM_TOKEN or not HF_API_KEY:
        print("‚ùå –£–∫–∞–∂–∏ TELEGRAM_TOKEN –∏ HF_API_KEY –≤ .env")
        return

    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_handler))
    app.add_handler(CommandHandler("voice", voice))
    app.add_handler(CommandHandler("ad", ad_handler))
    app.add_handler(CommandHandler("joke", joke_handler))
    app.add_handler(CommandHandler("quote", quote_handler))
    app.add_handler(CommandHandler("quiz", quiz_handler))
    app.add_handler(CommandHandler("fich", fich_handler))
    app.add_handler(CommandHandler("meme", meme_handler))
    app.add_handler(CommandHandler("info", info_handler))
    app.add_handler(CommandHandler("ping", ping_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_handler))

    print("‚úÖ Crazy Mita –∑–∞–ø—É—â–µ–Ω!")
    app.run_polling()

if __name__ == "__main__":
    main()
